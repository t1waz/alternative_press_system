import os
os.environ['KIVY_GL_BACKEND'] = 'gl'                # DUE TO RUNNING ON RASPI
from kivy.app import App
from kivy.lang import Builder
from kivy.uix.screenmanager import Screen
from service import AppService
import threading
from time import sleep
from kivy.uix.popup import Popup
from kivy.uix.label import Label
from kivy.properties import (StringProperty,
    ObjectProperty,
    ListProperty )


Builder.load_file('graphic.kv')


class MasterModuleThread(threading.Thread):
    def __init__(self, my_app):
        threading.Thread.__init__(self)
        self.app_service = AppService(my_app)
        self.is_opening = False
        self.counter = 0

    def run(self):
        while True:
            self.app_service.main_handling()
            sleep(0.5)
            self.counter += 1
            if self.counter > 10:
                self.app_service.init_times_and_molds()
                self.counter = 0


class MessageWindow(Popup):
    message_box = ObjectProperty()

    def __init__(self, **kwargs):
        super(MessageWindow, self).__init__(**kwargs)


class MainWindow(Screen):
    system_status = StringProperty('')
    message_labels_input_modules = ListProperty()
    message_labels_relay_modules = ListProperty()
    for index in range(1, 7):
        mold = 'press_{}_mold_label'.format(index)
        state = 'press_{}_state_label'.format(index)
        time = 'press_{}_time_label'.format(index)
        exec(mold + '  = StringProperty()')
        exec(state + '  = StringProperty()')
        exec(time + '  = StringProperty()')

    def __init__(self, **kwargs):
        super(MainWindow, self).__init__(**kwargs)

    def exit(self, *args, **kwargs):
                

    def show_info(self, *args):
        message_window = MessageWindow()
        message_window.message_input.add_widget(Label())
        message_window.message_relay.add_widget(Label())

        for each in self.message_labels_input_modules:
            if 'ACTIVE' in each:
                color = (0,1,0,1)
            else:
                color = (1,0,0,1)
            message_window.message_input.add_widget(Label(text=each,
                                                          color=color))

        for each in self.message_labels_relay_modules:
            if 'ACTIVE' in each:
                color = (0,1,0,1)
            else:
                color = (1,0,0,1)
            message_window.message_relay.add_widget(Label(text=each,
                                                          color=color))

        message_window.message_input.add_widget(Label())
        message_window.message_relay.add_widget(Label())

        message_window.open()


class PressApp(App):
    def __init__(self, **kwargs):

        super(PressApp, self).__init__(**kwargs)

    def build(self):
        main_window = MainWindow()
        MasterModuleThread(main_window).start()
        return main_window


if __name__ == '__main__':
    PressApp().run()
